// Based on:
// https://github.com/KhronosGroup/glTF-Sample-Viewer
module pbr

const kDebugModeColor = 1
const kDebugModeNormal = 2
const kDebugModeMetallic = 3
const kDebugModeRoughness = 4
const kDebugModeOcclusion = 5
const kDebugModeEmissive = 6

const kLightCount = 1
const kGamma = 2.2
const kPI = 3.1415926535897932384626433832795
const kExposure = 1.0

type Light {
  direction: fvec3
  range: float
  color: fvec3
  intensity: float
  position: fvec3
  innerConeCos: float
  outerConeCos: float
  lightType: int
  _: fvec2 // padding
}

type Global {
  projView: fmat4
  cameraPosition: fvec4
  lights: [kLightCount]Light
  debugMode: int
}

type Environment {
  diffuse: samplerCube
  specular: samplerCube
  brdfLUT: sampler2D
}

type Material {
  baseColorFactor: fvec4
  hasBaseColor, hasNormal, hasOcclusion, hasEmissive, hasMetallicRoughness: bool
  baseColor, normal, occlusion, emissive, metallicRoughness: sampler2D
  emissiveFactor: fvec3
  metallicFactor, roughnessFactor: float
  normalScale: float
  occlusionStrength: float
  alphaMode: int
  alphaCutoff: float
}

type PerObject {
  model: fmat4
  normalMat: fmat4
  hasColor: bool
  hasNormal: bool
  hasTangent: bool
}

type AngularInfo {
  NdotL: float
  NdotV: float
  NdotH: float
  LdotH: float
  VdotH: float
}

type MaterialInfo {
  perceptualRoughness: float // roughness value, as authored by the model creator (input to shader) 
  reflectance0: fvec3        // full reflectance color (normal incidence angle)
  alphaRoughness: float      // roughness mapped to a more linear change in the roughness (proposed by [2])
  diffuseColor: fvec3        // color contribution from diffuse lighting
  reflectance90: fvec3       // reflectance color at grazing angle
  specularColor: fvec3       // color contribution from specular lighting
}

pipeline ForwardPass(g: Global, env: Environment, mat: Material, obj: PerObject): (fvec4, float) {

  // See https://github.com/KhronosGroup/glTF-Sample-Viewer/blob/master/src/shaders/primitive.vert
  def vertex(position, normal, color: fvec3, tangent: fvec4, uv: fvec2): (fvec3, fvec2, fvec4, fmat3, fvec3) {
    val pos = obj.model * fvec4(position, 1.0)
    builtin.position = g.projView * pos
    val outPos = pos.xyz / pos.w

    var vertexColor = fvec4(1.0, 1.0, 1.0, 1.0)
    if obj.hasColor {
      vertexColor = fvec4(color, 1.0)
    }

    if obj.hasNormal {
      if obj.hasTangent {
        tangent = normalize(tangent)
        val normalW = normalize((obj.normalMat * fvec4(normal, 0.0)).xyz)
        val tangentW = normalize((obj.model * fvec4(tangent.xyz, 0.0)).xyz)
        val bitangentW = cross(normalW, tangentW) * tangent.w
        val tbn = fmat3(tangentW, bitangentW, normalW)
        val outNormal = fvec3(0.0)
        return outPos, uv, vertexColor, tbn, outNormal
      } else {
        val tbn = fmat3(1.0)
        val outNormal = normalize((obj.normalMat * fvec4(normal, 0.0)).xyz)
        return outPos, uv, vertexColor, tbn, outNormal
      }
    } 

    return outPos, uv, vertexColor, fmat3(1.0), fvec3(0.0)
  }

  // See http://chilliant.blogspot.com/2012/08/srgb-approximations-for-hlsl.html
  def linear2srgb(color: fvec3): fvec3 {
    val invGamma = 1.0 / kGamma
    return pow(color, fvec3(invGamma))
  }

  // See http://chilliant.blogspot.com/2012/08/srgb-approximations-for-hlsl.html
  def srgb2linear(color: fvec4): fvec4 {
    val v = pow(color.xyz, fvec3(kGamma))
    return fvec4(v, color.w)
  }


  def getNormal(pos: fvec3, uv: fvec2, tbn: fmat3, nor: fvec3): fvec3 {
    if !obj.hasTangent {
      val pos_dx = dFdx(pos)
      val pos_dy = dFdy(pos)
      val tex_dx = dFdx(fvec3(uv, 0.0))
      val tex_dy = dFdy(fvec3(uv, 0.0))

      var t = (tex_dy.t * pos_dx - tex_dx.t * pos_dy) / (tex_dx.s * tex_dy.t - tex_dy.s * tex_dx.t)
      var ng = fvec3(0.0)
      if obj.hasNormal {
        ng = normalize(nor)
      } else {
        ng = cross(pos_dx, pos_dy)
      }
      t = normalize(t - ng * dot(ng, t))
      val b = normalize(cross(ng, t))
      tbn = fmat3(t, b, ng)
    }

    if mat.hasNormal {
      val n = texture(mat.normal, uv).rgb
      return normalize(tbn * ((2.0 * n - 1.0) * fvec3(mat.normalScale, mat.normalScale, 1.0)))
    } else {
      return normalize(tbn[2].xyz)
    }
  }

  def getAngularInfo(pointToLight, normal, view: fvec3): AngularInfo {
    val n = normalize(normal)
    val v = normalize(view)
    val l = normalize(pointToLight)
    val h = normalize(l + v)
    
    return AngularInfo(
        NdotL = clamp(dot(n, l), 0.0, 1.0),
        NdotV = clamp(dot(n, v), 0.0, 1.0),
        NdotH = clamp(dot(n, h), 0.0, 1.0),
        LdotH = clamp(dot(l, h), 0.0, 1.0),
        VdotH = clamp(dot(v, h), 0.0, 1.0))
  }

  def getIBLContribution(materialInfo: MaterialInfo, n: fvec3, v: fvec3): fvec3 {
    val NdotV = clamp(dot(n, v), 0.0, 1.0)
    val reflection = normalize(reflect(-v, n))
    val brdfSamplePoint = clamp(fvec2(NdotV, materialInfo.perceptualRoughness), fvec2(0.0), fvec2(1.0))

    val brdf = texture(env.brdfLUT, brdfSamplePoint).rg
    val diffuseSample = texture(env.diffuse, n)
    val specularSample = texture(env.specular, reflection)
    
    val diffuseLight, specularLight = srgb2linear(diffuseSample).rgb, srgb2linear(specularSample).rgb
    val diffuse = diffuseLight * materialInfo.diffuseColor
    val specular = specularLight * (materialInfo.specularColor * brdf.x + brdf.y)

    return diffuse + specular
  }

  // Lambert lighting
  // see https://seblagarde.wordpress.com/2012/01/08/pi-or-not-to-pi-in-game-lighting-equation/
  def diffuse(materialInfo: MaterialInfo): fvec3 {
    return materialInfo.diffuseColor / kPI
  }

  // The following equation models the Fresnel reflectance term of the spec equation (aka F())
  // Implementation of fresnel from [4], Equation 15
  def specularReflection(materialInfo: MaterialInfo, angularInfo: AngularInfo): fvec3 {
    return materialInfo.reflectance0 + (materialInfo.reflectance90 - materialInfo.reflectance0) * pow(clamp(1.0 - angularInfo.VdotH, 0.0, 1.0), 5.0)
  }

  // Smith Joint GGX
  // Note: Vis = G / (4 * NdotL * NdotV)
  // see Eric Heitz. 2014. Understanding the Masking-Shadowing Function in Microfacet-Based BRDFs. Journal of Computer Graphics Techniques, 3
  // see Real-Time Rendering. Page 331 to 336.
  // see https://google.github.io/filament/Filament.md.html#materialsystem/specularbrdf/geometricshadowing(specularg)
  def visibilityOcclusion(materialInfo: MaterialInfo, angularInfo: AngularInfo): float {
    val NdotL = angularInfo.NdotL
    val NdotV = angularInfo.NdotV
    val alphaRoughnessSq = materialInfo.alphaRoughness * materialInfo.alphaRoughness

    val GGXV = NdotL * sqrt(NdotV * NdotV * (1.0 - alphaRoughnessSq) + alphaRoughnessSq)
    val GGXL = NdotV * sqrt(NdotL * NdotL * (1.0 - alphaRoughnessSq) + alphaRoughnessSq)
   
    val GGX = GGXV + GGXL
    if GGX > 0.0 {
      return 0.5 / GGX
    }
    return 0.0
  }

  // The following equation(s) model the distribution of microfacet normals across the area being drawn (aka D())
  // Implementation from "Average Irregularity Representation of a Roughened Surface for Ray Reflection" by T. S. Trowbridge, and K. P. Reitz
  // Follows the distribution function recommended in the SIGGRAPH 2013 course notes from EPIC Games [1], Equation 3.
  def microfacetDistribution(materialInfo: MaterialInfo, angularInfo: AngularInfo): float {
    val alphaRoughnessSq = materialInfo.alphaRoughness * materialInfo.alphaRoughness
    val f = (angularInfo.NdotH * alphaRoughnessSq - angularInfo.NdotH) * angularInfo.NdotH + 1.0
    return alphaRoughnessSq / (kPI * f * f)
  }

  def getPointShade(materialInfo: MaterialInfo, pointToLight, normal, view: fvec3): fvec3 {
    val angularInfo = getAngularInfo(pointToLight, normal, view)
    if angularInfo.NdotL > 0.0 || angularInfo.NdotV > 0.0 {
      // Calculate the shading terms for the microfacet specular shading model
      val F = specularReflection(materialInfo, angularInfo)
      val Vis = visibilityOcclusion(materialInfo, angularInfo)
      val D = microfacetDistribution(materialInfo,angularInfo)
  
      // Calculation of analytical lighting contribution
      val diffuseContrib = (1.0 - F) * diffuse(materialInfo)
      val specContrib = F * Vis * D
     
      // Obtain final intensity as reflectance (BRDF) scaled by the energy of the light (cosine law)
      return angularInfo.NdotL * (diffuseContrib + specContrib)
    }
    return fvec3(0.0, 0.0, 0.0)
  }
 
  // https://github.com/KhronosGroup/glTF/blob/master/extensions/2.0/Khronos/KHR_lights_punctual/README.md#range-property
  def getRangeAttenuation(range, dist: float): float {
    if (range < 0.0) {
        // negative range means unlimited
        return 1.0
    }
    return max(min(1.0 - pow(dist / range, 4.0), 1.0), 0.0) / pow(dist, 2.0)
  }

  def applyDirectionalLight(l: Light, materialInfo: MaterialInfo, normal, view: fvec3): fvec3 {
    val pointToLight = -l.direction
    val shade = getPointShade(materialInfo, pointToLight, normal, view)
    return l.intensity * l.color * shade
  }

  def applyPointLight(l: Light, materialInfo: MaterialInfo, position, normal, view: fvec3): fvec3 {
    val pointToLight = l.position - position
    val dist = length(pointToLight)
    val attenuation = getRangeAttenuation(l.range, dist)
    val shade = getPointShade(materialInfo, pointToLight, normal, view)
    return attenuation * l.intensity * l.color * shade
  }

  def toneMapHejlRichard(color: fvec3): fvec3 {
    color = max(fvec3(0.0), color - fvec3(0.004))
    return (color*(6.2*color+0.5))/(color*(6.2*color+1.7)+0.06)
  }

  def toneMap(color: fvec3): fvec3 {
    color *= kExposure
    return toneMapHejlRichard(color) 
  }

  // See https://github.com/KhronosGroup/glTF-Sample-Viewer/blob/master/src/shaders/metallic-roughness.frag
  def fragment(pos: fvec3, uv: fvec2, vertexColor: fvec4, tbn: fmat3, nor: fvec3): fvec4 {
    if builtin.currentDepth < builtin.fragCoord.z {
      discard
    }

    val f0 = fvec3(0.04)
    var perceptualRoughness, metallic = 0.0, 0.0
    var baseColor = fvec4(0.0, 0.0, 0.0, 1.0)
    var diffuseColor, specularColor = fvec3(0.0), fvec3(0.0)

    if mat.hasMetallicRoughness {
      val mrSample = texture(mat.metallicRoughness, uv)
      metallic = mrSample.b * mat.metallicFactor
      perceptualRoughness = mrSample.g * mat.roughnessFactor
    } else {
      metallic = mat.metallicFactor
      perceptualRoughness = mat.roughnessFactor
    }

    if mat.hasBaseColor {
      baseColor = srgb2linear(texture(mat.baseColor, uv)) * mat.baseColorFactor
    } else {
      baseColor = mat.baseColorFactor
    }

    if g.debugMode == kDebugModeColor {
      return baseColor
    }

    baseColor *= vertexColor
    diffuseColor = baseColor.rgb * (1.0-f0) * (1.0-metallic)
    specularColor = mix(f0, baseColor.rgb, metallic)

    if mat.alphaMode == 0 { // OPAQUE
      baseColor.a = 1.0
    }
    if mat.alphaMode == 1 { // MASK
      if baseColor.a < mat.alphaCutoff { discard }
      baseColor.a = 1.0
    }

    perceptualRoughness = clamp(perceptualRoughness, 0.0, 1.0)
    metallic = clamp(metallic, 0.0, 1.0)

    if g.debugMode == kDebugModeMetallic {
      return fvec4(fvec3(metallic), 1.0)
    }
    if g.debugMode == kDebugModeRoughness {
      return fvec4(fvec3(perceptualRoughness), 1.0)
    }

    val alphaRoughness = perceptualRoughness * perceptualRoughness
    val reflectance = max(max(specularColor.r, specularColor.g), specularColor.b)
    val specularEnvironmentR0 = specularColor.rgb
    val specularEnvironmentR90 = fvec3(clamp(reflectance * 50.0, 0.0, 1.0))
    
    val materialInfo = MaterialInfo(
        perceptualRoughness,
        specularEnvironmentR0,
        alphaRoughness,
        diffuseColor,
        specularEnvironmentR90,
        specularColor
    )

    // Lighting

    val normal = getNormal(pos, uv, tbn, nor)
    if g.debugMode == kDebugModeNormal {
      return fvec4(normal, 1.0)
    }
    val view = normalize(g.cameraPosition.xyz - pos)
    var color = fvec3(0.0)

    for i = 0 to (kLightCount-1) {
      if g.lights[i].lightType == 0 {
        color += applyDirectionalLight(g.lights[i], materialInfo, normal, view)
      }
      if g.lights[i].lightType == 1 {
        color += applyPointLight(g.lights[i], materialInfo, pos, normal, view)
      }
    }

    color += getIBLContribution(materialInfo, normal, view)

    if mat.hasOcclusion {
      if g.debugMode == kDebugModeOcclusion {
        return fvec4(fvec3(texture(mat.occlusion, uv).r), 1.0)
      }
      color = mix(color, color * texture(mat.occlusion, uv).r, mat.occlusionStrength)
    }
 
    if mat.hasEmissive { 
      if g.debugMode == kDebugModeEmissive {
        return fvec4(texture(mat.emissive, uv).rgb, 1.0)
      }
      color += srgb2linear(texture(mat.emissive, uv)).rgb * mat.emissiveFactor
    }
    
    color = toneMap(color)
    return fvec4(color, baseColor.a)
  }
}

renderer PBR(depthBuf: rt_ds) {

  def main(global: atom, env: atom, geometry: atomlist) {
    depthBuf = 1.0
    builtin.screen = fvec4(0.4, 0.4, 0.4, 1.0) 
    for g in geometry {
      builtin.screen, depthBuf += ForwardPass(g=global, env=env,
                                              mat=g, obj=g, 
                                              position=g, normal=g, color=g, tangent=g, uv=g)
    }
  }
}

